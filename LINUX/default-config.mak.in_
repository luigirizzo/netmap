###############################################################################
# This files defines the default values of the external-drivers variables,
# used by the configure script and the generated netmap.mak makefile.
#
# The variables are as follows:
#
# driver@v		the driver version
# driver@fetch		how to fetch the sources into the ext-drivers directory
# driver@src		how to extract the sources
# driver@patch		which patch(es) to apply (whitespace-separated)
# driver@prepare	how to prepare the sources for compilation
# driver@build		how to build the driver
# driver@install	how to install the driver
# driver@clean		how to clean the driver build directory
# driver@disclean	how to completely remove the driver build directory(ies)
# driver@force		configure refuses to build drivers which are not
# 			configured as modules in the kernel ".config". A 1 here
# 			forces configure to skip this check.
#
# In the configuration phase, the configure script tries to determine whether
# the external driver compiles by itself (i.e., independently of the netmap
# patch) by running the driver@fetch; driver@src; driver@prepare; driver@build
# commands (i.e., skipping the driver@patch). If this fails, a warning is
# printed and the driver is disabled.
#
# During the build phase the same commands are executed again, but this time
# the driver@patch is applied after driver@src and before driver@prepare.
#
# There should be no need to change this file if you just want to customize
# these variables for a particular build: put the overrides into a config.mak
# file in the build directory, before running configure.
#
# If you just want to select a different external-driver version, among the
# ones for which there is a patch in LINUX/final-patches, use the
# --select-version=driver:version option of configure.
#
#################################################################################


# default-config.mak is generated from default-config.mak_ in the LINUX directory,
# by replacing the recognized @VAR@ strings with the value of the named VAR
# in the configure scripts. The most important recognized variables are
#
# SRCDIR	absolute path of the netmap/LINUX directory
# KSRC		source directory of the linux kernel (headers should be sufficient
# 		for external drivers)
# KOPTS		options intended for the linux make (accumulated via the
# 		--kernel-opts= configure option
# DRVSUFFIX	the netmap driver suffix (--driver-suffix= configure option)
# MODPATH	where to install the modules (--install-mod-path= from configure)
# TMPDIR	the temporary directory where configure runs its tests (including
# 		the test build of the unpatched driver)
#
# In the build phase, the EXTRA_CFLAGS variable will contain the values assigned
# in the netmap.mak makefile. This is intended for options needed by the patched
# driver. During the configure phase the variable is empty.


# all the intel drivers are compiled in much the same way, so we factor them
# here. $(1) is the driver name, while $(2) is the driver version
define intel_driver
$(1)@fetch	:= test -e @SRCDIR@/ext-drivers/$(1)-$(2).tar.gz || wget https://sourceforge.net/projects/e1000/files/$(1)%20stable/$(2)/$(1)-$(2).tar.gz -P @SRCDIR@/ext-drivers/
$(1)@src 	:= tar xf @SRCDIR@/ext-drivers/$(1)-$(2).tar.gz && ln -s $(1)-$(2)/src $(1)
$(1)@patch 	:= patches/intel--$(1)--$(2)
$(1)@build 	 = make -C $(1) CFLAGS_EXTRA="$$($(1)@cflags) $(EXTRA_CFLAGS)" @KOPTS@ NETMAP_DRIVER_SUFFIX=@DRVSUFFIX@ KSRC=@KSRC@ KBUILD_EXTRA_SYMBOLS=@BUILDDIR@/Module.symvers
$(1)@install 	 = make -C $(1) install INSTALL_MOD_PATH=@MODPATH@ CFLAGS_EXTRA="$$($(1)@cflags) $(EXTRA_CFLAGS)" NETMAP_DRIVER_SUFFIX=@DRVSUFFIX@ KSRC=@KSRC@ KBUILD_EXTRA_SYMBOLS=@BUILDDIR@/Module.symvers
$(1)@clean 	 = if [ -d $(1) ]; then make -C $(1) clean CFLAGS_EXTRA="$$($(1)@cflags) $(EXTRA_CFLAGS)" NETMAP_DRIVER_SUFFIX=@DRVSUFFIX@ KSRC=@KSRC@; fi
$(1)@distclean	:= rm -rf $(1)-$(2)
$(1)@force	:= 1
endef

# set driver@v is not yet defined
define default
$(1)@v := $(if $($(1)@v),$($(1)@v),$(2))
endef

# set all the default versions (can be overridden by --select-version=)
$(eval $(call default,ixgbe,5.3.8))
$(eval $(call default,ixgbevf,4.3.2))
$(eval $(call default,e1000e,3.4.0.2))
$(eval $(call default,igb,5.3.5.20))
$(eval $(call default,i40e,2.4.6))
$(eval $(call default,ice,1.7.16))

# some additional, driver-specific CFLAGS (used in the @build variable above) and fixes
e1000e@cflags := -fno-pie
igb@cflags := -DDISABLE_PACKET_SPLIT -fno-pie
ixgbe@cflags := $(addprefix -Wno-,@REC_DISABLED_WARNINGS@)
i40e@cflags :=  $(addprefix -Wno-,@REC_DISABLED_WARNINGS@)
igb@prepare := $(if $(filter $(igb@v),5.3.5.61 5.3.6 5.4.6 5.5.2 5.7.2 5.8.5 5.9.3 5.10.2),@BUILDDIR@/intel-fix.sh igb,)
e1000e@prepare := $(if $(filter $(e1000e@v),3.8.4 3.8.7),@BUILDDIR@/intel-fix.sh e1000e,)
ixgbevf@prepare := $(if $(filter $(ixgbevf@v),4.7.1 4.8.1 4.9.3 4.10.2 4.11.1 4.12.4 4.13.3 4.14.5 4.15.1),@BUILDDIR@/intel-fix.sh ixgbevf,)
ixgbe@prepare := $(if $(filter $(ixgbe@v),5.8.1 5.9.4 5.10.2 5.11.3 5.12.5 5.13.4),@BUILDDIR@/intel-fix.sh ixgbe,)
i40e@prepare := $(if $(filter $(i40e@v),2.12.6 2.14.13 2.15.9 2.16.11 2.17.4 2.17.15 2.18.9 2.19.3),@BUILDDIR@/intel-fix.sh i40e,)
ice@prepare := $(if $(filter $(ice@v),1.7.16 1.8.8 1.8.9 1.9.7 1.9.11),@BUILDDIR@/intel-fix.sh ice,)

# some additional, driver-specific configuration
stmmac@conf := CONFIG_STMMAC_ETH

# only define the drivers that are selected after the --(no-)ext-drivers= processing (variable E_DRIVERS)
$(foreach d,$(filter ixgbe ixgbevf e1000e igb ice i40e,$(E_DRIVERS)),$(eval $(call intel_driver,$d,$($(d)@v))))


define mellanox_driver
$(1)@fetch	:= test -e @SRCDIR@/ext-drivers/mlnx-en-$(2)-ubuntu18.04-x86_64.tgz || wget http://content.mellanox.com/ofed/MLNX_EN-$(2)/mlnx-en-$(2)-ubuntu18.04-x86_64.tgz -P @SRCDIR@/ext-drivers
$(1)@src	:= tar xf @SRCDIR@/ext-drivers/mlnx-en-$(2)-ubuntu18.04-x86_64.tgz && tar xf mlnx-en-$(2)-ubuntu18.04-x86_64/src/MLNX_EN_SRC-$(2).tgz && tar xf MLNX_EN_SRC-$(2)/SOURCES/mlnx-en_$($(1)@pv).orig.tar.gz && ln -s mlnx-en-$($(1)@pv) $(1)
$(1)@patch	:= patches/mellanox--$(1)--$($(1)@pv)
$(1)@prepare	:= @SRCDIR@/mlx5-prepare.sh @KSRC@
$(1)@build	:= make -C $(1) NETMAP_DRIVER_SUFFIX=@DRVSUFFIX@ EXTRA_CFLAGS="$$($(1)@cflags) $(EXTRA_CFLAGS)"
$(1)@install	:= make -C $(1) install_modules INSTALL_MOD_PATH=@MODPATH@ NETMAP_DRIVER_SUFFIX=@DRVSUFFIX@
$(1)@clean	:= if [ -d $(1) ]; then make -C $(1) clean; fi NETMAP_DRIVER_SUFFIX=@DRVSUFFIX@
$(1)@distclean  := rm -rf mlnx-en-$($(1)@pv) mlnx-en-$(2)
$(1)@force	:= 1
endef

$(eval $(call default,mlx5,5.3-1.0.0.1))
mlx5@pv		= $(firstword $(subst -, ,$(mlx5@v)))
mlx5@conf	= CONFIG_MLX5_CORE_EN
mlx5@cflags	= -Wframe-larger-than=2000

$(foreach d,$(filter mlx5,$(E_DRIVERS)),$(eval $(call mellanox_driver,$d,$($(d)@v))))

define virtio_net
virtio_net.c@fetch	:= test -e @SRCDIR@/ext-drivers/virtio_net.c || wget https://raw.githubusercontent.com/torvalds/linux/v4.9/drivers/net/virtio_net.c -P @SRCDIR@/ext-drivers/
virtio_net.c@src	:= mkdir -p virtio_net.c && cp @SRCDIR@/ext-drivers/virtio_net.c virtio_net.c/
virtio_net.c@patch	:= patches/custom--virtio_net.c--4.9
virtio_net.c@prepare	:=
virtio_net.c@build 	:= [ -z "$(EXTRA_CFLAGS)" ] || make -C virtio_net.c EXTRA_CFLAGS="$(EXTRA_CFLAGS)" @KOPTS@ NETMAP_DRIVER_SUFFIX=@DRVSUFFIX@ KSRC=@KSRC@
virtio_net.c@install 	:= make -C virtio_net.c install INSTALL_MOD_PATH=@MODPATH@ EXTRA_CFLAGS="$(EXTRA_CFLAGS)" NETMAP_DRIVER_SUFFIX=@DRVSUFFIX@ KSRC=@KSRC@
virtio_net.c@clean 	:= if [ -d virtio_net.c ]; then make -C virtio_net.c clean EXTRA_CFLAGS="$(EXTRA_CFLAGS)" NETMAP_DRIVER_SUFFIX=@DRVSUFFIX@ KSRC=@KSRC@; fi
virtio_net.c@distclean	:=
virtio_net.c@force	:= 1
endef

$(foreach d,$(filter virtio_net.c,$(E_DRIVERS)),$(eval $(call virtio_net)))
