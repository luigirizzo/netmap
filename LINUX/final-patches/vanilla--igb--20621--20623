diff --git a/igb/igb_main.c b/igb/igb_main.c
index c881347cb26d..a2af3799f5a8 100644
--- a/igb/igb_main.c
+++ b/igb/igb_main.c
@@ -226,6 +226,10 @@ char *igb_get_hw_dev_name(struct e1000_hw *hw)
 	return adapter->netdev->name;
 }
 
+#if defined(CONFIG_NETMAP) || defined(CONFIG_NETMAP_MODULE)
+#include <if_igb_netmap.h>
+#endif
+
 /**
  * igb_get_time_str - format current NIC and system time as string
  */
@@ -1614,6 +1618,10 @@ static int __devinit igb_probe(struct pci_dev *pdev,
 	/* carrier off reporting is important to ethtool even BEFORE open */
 	netif_carrier_off(netdev);
 
+#ifdef DEV_NETMAP
+	igb_netmap_attach(adapter);
+#endif /* DEV_NETMAP */
+
 #ifdef CONFIG_IGB_DCA
 	if (dca_add_requester(&pdev->dev) == 0) {
 		adapter->flags |= IGB_FLAG_DCA_ENABLED;
@@ -1699,6 +1707,10 @@ static void __devexit igb_remove(struct pci_dev *pdev)
 		wr32(E1000_DCA_CTRL, E1000_DCA_CTRL_DCA_MODE_DISABLE);
 	}
 #endif
+#ifdef DEV_NETMAP
+	netmap_detach(netdev);
+#endif /* DEV_NETMAP */
+
 
 	/* Release control of h/w to f/w.  If f/w is AMT enabled, this
 	 * would have already happened in close and is redundant. */
@@ -2196,6 +2208,9 @@ void igb_configure_tx_ring(struct igb_adapter *adapter,
 
 	txdctl |= E1000_TXDCTL_QUEUE_ENABLE;
 	wr32(E1000_TXDCTL(reg_idx), txdctl);
+#ifdef DEV_NETMAP
+	igb_netmap_configure_tx_ring(adapter, reg_idx);
+#endif /* DEV_NETMAP */
 }
 
 /**
@@ -4905,6 +4920,11 @@ static bool igb_clean_tx_irq(struct igb_q_vector *q_vector)
 	unsigned int i, eop, count = 0;
 	bool cleaned = false;
 
+#ifdef DEV_NETMAP
+        if (netmap_tx_irq(netdev, tx_ring->queue_index))
+                return 1; /* cleaned ok */
+#endif /* DEV_NETMAP */
+
 	i = tx_ring->next_to_clean;
 	eop = tx_ring->buffer_info[i].next_to_watch;
 	eop_desc = E1000_TX_DESC_ADV(*tx_ring, eop);
@@ -5109,6 +5129,11 @@ static bool igb_clean_rx_irq_adv(struct igb_q_vector *q_vector,
 	u16 length;
 	u16 vlan_tag;
 
+#ifdef DEV_NETMAP
+	if (netmap_rx_irq(netdev, rx_ring->queue_index, work_done))
+		return 1;
+#endif /* DEV_NETMAP */
+
 	i = rx_ring->next_to_clean;
 	buffer_info = &rx_ring->buffer_info[i];
 	rx_desc = E1000_RX_DESC_ADV(*rx_ring, i);
@@ -5236,6 +5261,10 @@ void igb_alloc_rx_buffers_adv(struct igb_ring *rx_ring, int cleaned_count)
 	unsigned int i;
 	int bufsz;
 
+#ifdef DEV_NETMAP
+	if (igb_netmap_configure_rx_ring(rx_ring))
+                return;
+#endif /* DEV_NETMAP */
 	i = rx_ring->next_to_use;
 	buffer_info = &rx_ring->buffer_info[i];
 
