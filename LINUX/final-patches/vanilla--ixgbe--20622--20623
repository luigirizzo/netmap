diff --git a/ixgbe/ixgbe_main.c b/ixgbe/ixgbe_main.c
index 6c00ee4..50d9f5e 100644
--- a/ixgbe/ixgbe_main.c
+++ b/ixgbe/ixgbe_main.c
@@ -400,6 +400,16 @@ static bool ixgbe_clean_tx_irq(struct ixgbe_q_vector *q_vector,
 	unsigned int i, eop, count = 0;
 	unsigned int total_bytes = 0, total_packets = 0;
 
+#ifdef DEV_NETMAP
+	/*
+	* In netmap mode, all the work is done in the context
+	* of the client thread. Interrupt handlers only wake up
+	* clients, which may be sleeping on individual rings
+	* or on a global resource for all rings.
+	*/
+	if (netmap_tx_irq(adapter->netdev, tx_ring->queue_index) != NM_IRQ_PASS)
+		return 1; /* seems to be ignored */
+#endif /* DEV_NETMAP */
 	i = tx_ring->next_to_clean;
 	eop = tx_ring->tx_buffer_info[i].next_to_watch;
 	eop_desc = IXGBE_TX_DESC_ADV(*tx_ring, eop);
@@ -845,6 +855,18 @@ static bool ixgbe_clean_rx_irq(struct ixgbe_q_vector *q_vector,
 	int ddp_bytes = 0;
 #endif /* IXGBE_FCOE */
 
+#ifdef DEV_NETMAP
+	int nm_irq;
+	/*
+	 * Same as the txeof routine: only wakeup clients on intr.
+	 */
+	nm_irq = netmap_rx_irq(adapter->netdev, rx_ring->queue_index, work_done);
+	if (nm_irq != NM_IRQ_PASS) {
+		*work_done = (nm_irq == NM_IRQ_RESCHED) ? work_to_do : 1;
+		return true;
+	}
+#endif /* DEV_NETMAP */
+
 	i = rx_ring->next_to_clean;
 	rx_desc = IXGBE_RX_DESC_ADV(*rx_ring, i);
 	staterr = le32_to_cpu(rx_desc->wb.upper.status_error);
@@ -1103,6 +1125,24 @@ static void ixgbe_configure_msix(struct ixgbe_adapter *adapter)
 	IXGBE_WRITE_REG(&adapter->hw, IXGBE_EIAC, mask);
 }
 
+#if defined(CONFIG_NETMAP) || defined(CONFIG_NETMAP_MODULE)
+/*
+ * The #ifdef DEV_NETMAP / #endif blocks in this file are meant to
+ * be a reference on how to implement netmap support in a driver.
+ * Additional comments are in ixgbe_netmap_linux.h .
+ *
+ * The code is originally developed on FreeBSD and in the interest
+ * of maintainability we try to limit differences between the two systems.
+ *
+ * <ixgbe_netmap_linux.h> contains functions for netmap support
+ * that extend the standard driver.
+ * It also defines DEV_NETMAP so further conditional sections use
+ * that instead of CONFIG_NETMAP
+ */
+#include <ixgbe_netmap_linux.h>
+#endif
+
+
 enum latency_range {
 	lowest_latency = 0,
 	low_latency = 1,
@@ -1139,7 +1179,6 @@ static u8 ixgbe_update_itr(struct ixgbe_adapter *adapter,
 	if (packets == 0)
 		goto update_itr_done;
 
-
 	/* simple throttlerate management
 	 *    0-20MB/s lowest (100000 ints/s)
 	 *   20-100MB/s low   (20000 ints/s)
@@ -2738,6 +2777,12 @@ static void ixgbe_configure(struct ixgbe_adapter *adapter)
 
 	ixgbe_configure_tx(adapter);
 	ixgbe_configure_rx(adapter);
+#ifdef DEV_NETMAP
+	for (i = 0; i < adapter->num_rx_queues; i++)
+		ixgbe_netmap_configure_rx_ring(adapter,
+			adapter->rx_ring[i]->reg_idx);
+	return;
+#endif /* DEV_NETMAP */
 	for (i = 0; i < adapter->num_rx_queues; i++)
 		ixgbe_alloc_rx_buffers(adapter, adapter->rx_ring[i],
 		                       (adapter->rx_ring[i]->count - 1));
@@ -2955,6 +3000,10 @@ static int ixgbe_up_complete(struct ixgbe_adapter *adapter)
 				DPRINTK(DRV, ERR, "Could not enable "
 				        "Tx Queue %d\n", j);
 		}
+#ifdef DEV_NETMAP // XXX i and j are the same ?
+		ixgbe_netmap_configure_tx_ring(adapter, j);
+#endif /* DEV_NETMAP */
+
 	}
 
 	for (i = 0; i < num_rx_rings; i++) {
@@ -4641,6 +4690,9 @@ static int ixgbe_open(struct net_device *netdev)
 		goto err_up;
 
 	netif_tx_start_all_queues(netdev);
+#ifdef DEV_NETMAP
+	ixgbe_netmap_attach(adapter);
+#endif /* DEV_NETMAP */
 
 	return 0;
 
@@ -6402,6 +6454,10 @@ static void __devexit ixgbe_remove(struct pci_dev *pdev)
 	struct net_device *netdev = pci_get_drvdata(pdev);
 	struct ixgbe_adapter *adapter = netdev_priv(netdev);
 
+#ifdef DEV_NETMAP
+	netmap_detach(netdev);
+#endif /* DEV_NETMAP */
+
 	set_bit(__IXGBE_DOWN, &adapter->state);
 	/* clear the module not found bit to make sure the worker won't
 	 * reschedule
