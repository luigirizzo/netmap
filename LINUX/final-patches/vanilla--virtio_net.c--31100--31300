diff --git a/virtio_net.c b/virtio_net.c
index 59caa06..35c0320 100644
--- a/virtio_net.c
+++ b/virtio_net.c
@@ -145,6 +145,10 @@ struct virtnet_info {
 	struct notifier_block nb;
 };
 
+#if defined(CONFIG_NETMAP) || defined(CONFIG_NETMAP_MODULE)
+#include <virtio_netmap.h>
+#endif
+
 struct skb_vnet_hdr {
 	union {
 		struct virtio_net_hdr hdr;
@@ -224,6 +228,10 @@ static void skb_xmit_done(struct virtqueue *vq)
 	/* Suppress further interrupts. */
 	virtqueue_disable_cb(vq);
 
+#ifdef DEV_NETMAP
+        if (netmap_tx_irq(vi->dev, vq2txq(vq)))
+		return;
+#endif
 	/* We were probably waiting for more output buffers. */
 	netif_wake_subqueue(vi->dev, vq2txq(vq));
 }
@@ -754,6 +762,19 @@ static int virtnet_poll(struct napi_struct *napi, int budget)
 		container_of(napi, struct receive_queue, napi);
 	unsigned int r, received = 0;
 
+#ifdef DEV_NETMAP
+        int work_done = 0;
+	struct virtnet_info *vi = rq->vq->vdev->priv;
+	int nm_irq = netmap_rx_irq(vi->dev, vq2rxq(rq->vq), &work_done);
+
+	if (nm_irq == NM_IRQ_COMPLETED) {
+		napi_complete(napi);
+                return 1;
+        } else if (nm_irq == NM_IRQ_RESCHED) {
+		return budget;
+	}
+#endif
+
 again:
 	received += virtnet_receive(rq, budget - received);
 
@@ -813,6 +834,15 @@ static int virtnet_open(struct net_device *dev)
 {
 	struct virtnet_info *vi = netdev_priv(dev);
 	int i;
+#ifdef DEV_NETMAP
+        int ok = virtio_netmap_init_buffers(vi);
+
+        if (ok) {
+            for (i = 0; i < vi->max_queue_pairs; i++)
+		virtnet_napi_enable(&vi->rq[i]);
+            return 0;
+        }
+#endif
 
 	for (i = 0; i < vi->max_queue_pairs; i++) {
 		if (i < vi->curr_queue_pairs)
@@ -1826,6 +1856,10 @@ static int virtnet_probe(struct virtio_device *vdev)
 		goto free_recv_bufs;
 	}
 
+#ifdef DEV_NETMAP
+        virtio_netmap_attach(vi);
+#endif
+
 	/* Assume link up if device can't report link status,
 	   otherwise get link status from config. */
 	if (virtio_has_feature(vi->vdev, VIRTIO_NET_F_STATUS)) {
@@ -1872,7 +1906,14 @@ static void remove_vq_common(struct virtnet_info *vi)
 static void virtnet_remove(struct virtio_device *vdev)
 {
 	struct virtnet_info *vi = vdev->priv;
+#ifdef DEV_NETMAP
+	/* Save the pointer, will go away after netmap_detach(). */
+	struct netmap_adapter *token = NA(vi->dev);
 
+	netmap_detach(vi->dev);
+	virtio_netmap_clean_used_rings(vi, token);
+	virtio_netmap_reclaim_unused(vi);
+#endif
 	unregister_hotcpu_notifier(&vi->nb);
 
 	/* Prevent config work handler from accessing the device. */
@@ -1973,6 +2014,9 @@ static unsigned int features[] = {
 	VIRTIO_NET_F_GUEST_ANNOUNCE, VIRTIO_NET_F_MQ,
 	VIRTIO_NET_F_CTRL_MAC_ADDR,
 	VIRTIO_F_ANY_LAYOUT,
+#ifdef VIRTIO_NET_F_PTNETMAP
+	VIRTIO_NET_F_PTNETMAP,
+#endif
 };
 
 static struct virtio_driver virtio_net_driver = {
